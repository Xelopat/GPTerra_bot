import io
import os
from time import sleep
import openai

import matplotlib

import telebot
from PIL import Image
from matplotlib import pyplot as plt
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, InputMediaVideo

from db import *
from keyboard import *
from functions import *
from config import *
from errors import *

try:
    os.mkdir("./users_photos")
except FileExistsError:
    pass
ruble_rate = take_rub()
matplotlib.use('Agg')
bot = telebot.TeleBot("6181517228:AAEtFBfBC_H8LAWxj9ZBnm9w1wtzcyfKvHw", parse_mode="HTML")  # server
pay_token = "381764678:TEST:54259"
kf = 3
kf_i = 2

my_key = get_key()
print(my_key)
if my_key and my_key[1] > 0:
    openai.api_key = my_key[0]
else:
    change_key()
    openai.api_key = get_key()[0]


@bot.my_chat_member_handler()
def join(message):
    chat_id = message.chat.id
    if message.new_chat_member.status != "member":
        del_user(chat_id)
    else:
        update_user(chat_id)


@bot.message_handler(commands=['start'])
def start_message(message):
    user_id = message.from_user.id
    text = message.text
    info = text.split()
    refer = None
    if len(info) == 2:
        refer = info[1]
    if not user_exists(user_id):
        if refer and refer != str(user_id):
            update_balance(refer, 5)
            update_refers(refer)
            bot.send_message(refer, f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å: 5‚ÇΩ!. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {get_balance(refer)}‚ÇΩ",
                             reply_markup=main_k)
        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GPTerraü§ñ!"
                                  "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ãüìù, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏üí° –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—èüé®\n"
                                  "–°–µ–π—á–∞—Å —É —Ç–µ–±—è –Ω–∞ –±–∞–ª–∞–Ω—Å–µ 10‚ÇΩ. –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä—É–≥–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å –µ—â—ë 5‚ÇΩ. "
                                  "(–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ)",
                         reply_markup=main_chat_k)
        return
    model = get_model(user_id)
    if model == "gpt-3.5-turbo":
        bot.send_message(user_id, f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: gpt-3.5-turbo", reply_markup=main_chat_k)
    else:
        bot.send_message(user_id, f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {model}", reply_markup=main_k)


@bot.message_handler(content_types=['text', 'photo'])
def i_get_message(message):
    if message.chat.type == "private":
        chat_id = message.chat.id
        text = message.text
        if not text:
            text = ""
        user_id = message.from_user.id
        message_id = message.id
        if user_id == 848438079:
            if text == ".":
                bot.send_message(user_id, "–ê–¥–º–∏–Ω–∫–∞", reply_markup=admin_k)
                return
            elif text[:3] == "sql":
                bot.send_message(user_id, sql(text[4:]), reply_markup=admin_k)
                return
            elif text == admin_k.keyboard[0][0]["text"]:
                bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á —Ñ–æ—Ä–º–∞—Ç key amount login|pass",
                                 reply_markup=back_k)
                bot.register_next_step_handler_by_chat_id(chat_id, set_key)
                return
            elif text == admin_k.keyboard[0][1]["text"]:
                all_keys = get_all_keys()
                key_text = ""
                for i in all_keys:
                    key_text += f"<code>{i[0]}</code>: {i[1]}$ (<code>{i[2]}</code>)  -  {'active' if i[3] else ''}\n\n"
                bot.send_message(user_id, f"–í—Å–µ –∫–ª—é—á–∏:\n{key_text}", parse_mode="HTML")
                return
            elif text == admin_k.keyboard[1][0]["text"]:
                bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=back_k)
                bot.register_next_step_handler_by_chat_id(chat_id, mailing)
                return
            elif text == admin_k.keyboard[1][1]["text"]:
                graphs = create_statistic()
                all_with_block = len(get_all_users(True))
                all_users = len(get_all_users())
                media_group = [InputMediaPhoto(open(graphs[0], 'rb'), caption=f"–í—Å–µ–≥–æ: {all_with_block}\n"
                                                                              f"–£–¥–∞–ª–∏–ª–∏: {all_with_block - all_users}\n"
                                                                              f"–ò—Ç–æ–≥–æ: {all_users}\n"),
                               InputMediaPhoto(open(graphs[1], 'rb'))]
                bot.send_media_group(user_id, media=media_group)
                return
            elif text == back_k.keyboard[0][0]["text"]:
                bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å", reply_markup=main_k)
                return
        if text == main_k.keyboard[0][0]["text"]:
            balance = get_balance(user_id)
            refers_c = get_refers(user_id)
            bot.send_message(user_id, f"üç™–ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ\n"
                                      f"üë•–†–µ—Ñ–µ—Ä–∞–ª—ã: {refers_c} ",
                             reply_markup=create_profile_k(user_id))
            return
        elif text == main_k.keyboard[0][1]["text"]:
            bot.send_message(user_id, f"üîÑ–í—ã–±–µ—Ä–∏ –Ω–µ–π—Ä–æ–Ω–∫—ÉüîÑ", disable_web_page_preview=True,
                             reply_markup=all_ai_k)
            bot.register_next_step_handler_by_chat_id(user_id, switch_ai)
            return
        elif text == main_chat_k.keyboard[1][0]["text"]:
            bot.send_message(user_id, f"–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞! –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å–Ω–∞—á–∞–ª–∞")
            del_messages(user_id)
            return
        elif text == back_k.keyboard[0][0]["text"]:
            bot.send_message(user_id, f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_k)
            return
        balance = get_balance(user_id)
        if balance <= 0:
            bot.send_message(user_id, "üòï–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–µ–Ω—å–≥–∏. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ—â—ë 5‚ÇΩ "
                                      "—Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–∞.\n–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Åü•π",
                             reply_markup=create_profile_k(user_id))
            return
        if len(text) > 2048:
            bot.send_message(user_id, "‚ö† –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ - 2048 ‚ö†Ô∏è")
            return
        try:
            my_model = get_model(user_id)
            if my_model == "DALLE":
                to_edit = bot.send_animation(user_id, open('load_photo.gif', 'rb'), caption="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...",
                                             reply_to_message_id=message_id).message_id
                reply_message = message.reply_to_message
                photo = message.photo
                if reply_message or photo:
                    if photo:
                        file_info = bot.get_file(photo[-1].file_id)
                    else:
                        file_info = bot.get_file(reply_message.photo[-1].file_id)
                    downloaded_file = bot.download_file(file_info.file_path)
                    image = Image.open(io.BytesIO(downloaded_file))
                    width, height = image.size
                    if width != height:
                        bot.edit_message_caption("–î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!",
                                                 user_id, to_edit)
                    new_image = image.resize((512, 512))
                    new_image.save(f"./users_photos/{user_id}_e.png")
                    response = openai.Image.create_variation(
                        image=open(f"./users_photos/{user_id}_e.png", "rb"),
                        n=1,
                        size="512x512"
                    )
                else:
                    response = openai.Image.create(
                        prompt=text,
                        n=1,
                        size="512x512"
                    )
                key_used = price[my_model]
                amount = kf_i * key_used * ruble_rate
                image_url = response['data'][0]['url']
                img_data = requests.get(image_url).content
                with open(f'./users_photos/{user_id}.png', 'wb') as handler:
                    handler.write(img_data)
                bot.edit_message_media(InputMediaPhoto(open(f'./users_photos/{user_id}.png', 'rb'),
                                                       caption=f"<a href='{image_url}'>–ì–æ—Ç–æ–≤–æ! *—Ç—ã–∫</a>",
                                                       parse_mode="HTML"),
                                       user_id, to_edit)
            elif my_model == "gpt-3.5-turbo":
                to_edit = bot.send_message(user_id, "‚è≥Ô∏è–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞", reply_to_message_id=message_id).message_id
                new_message(user_id, 0, text)
                all_messages = get_messages(user_id)
                messages_mas = []
                for i in all_messages:
                    if i[0] == 0:
                        role = "user"
                    else:
                        role = "assistant"
                    messages_mas.append({"role": role, "content": i[1]})
                response = openai.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=messages_mas
                )
                tokens_used = response.usage.total_tokens
                key_used = tokens_used * price[my_model] / 1000
                amount = kf * key_used * ruble_rate
                result = response.choices[0].message.content
                bot.edit_message_text(result, chat_id, to_edit)
                new_message(user_id, 1, result)
            else:
                to_edit = bot.send_message(user_id, "‚è≥  Ô∏è–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞", reply_to_message_id=message_id).message_id
                response = openai.Completion.create(engine=my_model,
                                                    prompt=text,
                                                    temperature=0.7,
                                                    max_tokens=2000,
                                                    top_p=1.0,
                                                    frequency_penalty=0.0,
                                                    presence_penalty=0.6,
                                                    stop=None,
                                                    n=1
                                                    )
                tokens_used = response.usage.total_tokens
                key_used = tokens_used * price[my_model] / 1000
                amount = kf * key_used * ruble_rate
                result = response.choices[0].text
                bot.edit_message_text(text + result, chat_id, to_edit)
            update_balance(user_id, -amount)
            update_key_balance(-key_used)
            if get_key()[1] <= 0:
                change_key()
                reload_key = get_key()
                if reload_key:
                    openai.api_key = reload_key[0]
        except Exception as e:
            e = str(e)
            if e == limit_err:
                if change_key():
                    openai.api_key = get_key()[0]
                    i_get_message(message)
                else:
                    bot.send_message(chat_id, "üóùÔ∏è–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫–ª—é—á–∏, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—èüóùÔ∏è")
            elif e == overload_err:
                bot.send_message(chat_id, "üóÑÔ∏è–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µüóÑÔ∏è")
            elif e == server_error:
                bot.send_message(chat_id, "üëæ–û—à–∏–±–∫–∞ CHAT-GPTüëæ")
            elif e == key_error_0 or e == key_error_1 or e == key_error_2:
                if change_key():
                    openai.api_key = get_key()[0]
                    i_get_message(message)
                else:
                    bot.send_message(chat_id, "üóùÔ∏è–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫–ª—é—á–∏, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—èüóùÔ∏è")
            elif e == safety:
                bot.send_message(chat_id, "–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ openai")
            elif e == load_photo:
                bot.send_message(chat_id, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 4–ú–ë")
            else:
                bot.send_message(chat_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!")
                bot.send_message(848438079, e)


@bot.callback_query_handler(func=lambda call: call.data == 'balance_plus')
def balance_plus(call):
    user_id = call.from_user.id
    call_id = call.id
    bot.answer_callback_query(call_id)
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", reply_markup=amount_to_pay_k)
    bot.register_next_step_handler_by_chat_id(user_id, pay_balance)


@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout_query(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@bot.message_handler(content_types=['successful_payment'])
def process_successful_payment(message):
    user_id = message.from_user.id
    amount = message.successful_payment.total_amount / 100
    if amount >= 500:
        amount *= 1.15
    elif amount >= 250:
        amount *= 1.1
    update_balance(user_id, amount)
    model = get_model(user_id)
    if model == "gpt-3.5-turbo":
        bot.send_message(message.chat.id, f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, {amount}‚ÇΩ —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ!\n'
                                          f'–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {get_balance(user_id)}‚ÇΩ', reply_markup=main_chat_k)
    else:
        bot.send_message(message.chat.id, f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, {amount}‚ÇΩ —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ!\n'
                                          f'–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {get_balance(user_id)}‚ÇΩ', reply_markup=main_k)


def pay_balance(message):
    text = message.text
    user_id = message.from_user.id
    if not text:
        return
    if text == back_k.keyboard[0][0]["text"]:
        model = get_model(user_id)
        if get_balance(user_id) > 0:
            if model == "gpt-3.5-turbo":
                bot.send_message(user_id, f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: gpt-3.5-turbo", reply_markup=main_chat_k)
            else:
                bot.send_message(user_id, f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {model}", reply_markup=main_k)
        else:
            bot.send_message(user_id, f"–Ø –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç–∞ –≤ –æ–¥–∏–Ω–æ—á–∫—É –∏ –º–Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ, "
                                      f"–µ—Å–ª–∏ —Ç—ã –ø–æ–º–æ–∂–µ—à—å –≤ –µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏–∏. \n–í –±—É–¥—É—â–µ–º —è —Ö–æ—á—É –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –Ω–µ–π—Ä–æ–Ω–∫—É, "
                                      f"–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω—ã –±–æ–ª—å—à–∏–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–π –º–æ—â–Ω–æ—Å—Ç–∏, "
                                      f"–Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –¥–µ–Ω–µ–≥", reply_markup=main_k)
        return
    sum_to_pay = text.replace("‚ÇΩ", "").split()[0]
    try:
        sum_to_pay = int(sum_to_pay)
        if 100 > sum_to_pay:
            raise ZeroDivisionError
    except ValueError:
        bot.send_message(user_id, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å—É–º–º–∞ —ç—Ç–æ —á–∏—Å–ª–æ). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ :)")
        bot.register_next_step_handler_by_chat_id(user_id, pay_balance)
        return
    except ZeroDivisionError:
        bot.send_message(user_id, f"–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 100‚ÇΩ. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º")
        bot.register_next_step_handler_by_chat_id(user_id, pay_balance)
        return
    try:
        bot.send_invoice(
            message.chat.id,
            title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
            description="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, –±–ª–∞–≥–æ–¥–∞—Ä—è —Ç–µ–±–µ –ø—Ä–æ–µ–∫—Ç —Ä–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è",
            provider_token=pay_token,
            currency='rub',
            photo_size=512,
            photo_width=512,
            photo_height=512,
            photo_url="https://i.ibb.co/yycBNXr/money.jpg",
            is_flexible=False,
            prices=[telebot.types.LabeledPrice(label='–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞', amount=sum_to_pay * 100)],
            start_parameter='time-machine-example',
            invoice_payload=f'receive_money {sum_to_pay}'
        )
    except:
        bot.send_message(user_id, f"–û—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        bot.register_next_step_handler_by_chat_id(user_id, pay_balance)
        return


def switch_ai(message):
    text = message.text
    user_id = message.from_user.id
    if text == back_k.keyboard[0][0]["text"]:
        model = get_model(user_id)
        if model == "gpt-3.5-turbo":
            bot.send_message(user_id, f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: gpt-3.5-turbo", reply_markup=main_chat_k)
        else:
            bot.send_message(user_id, f"–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å, —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {model}", reply_markup=main_k)
        return
    model = delete_emoji(text)
    if model in price:
        if model == "gpt-3.5-turbo":
            keyboard = main_chat_k
        else:
            keyboard = main_k
        bot.send_message(user_id, "–ù–µ–π—Ä–æ—Å–µ—Ç—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å", reply_markup=keyboard)
        for i in description[model]:
            bot.send_message(user_id, i)
        update_model(user_id, model)
    else:
        bot.send_message(user_id, "–ù–µ—Ç —Ç–∞–∫–æ–π –Ω–µ–π—Ä–æ–Ω–∫–∏")
        bot.register_next_step_handler_by_chat_id(user_id, switch_ai)


def set_key(message):
    text = message.text
    user_id = message.from_user.id
    if text == back_k.keyboard[0][0]["text"]:
        bot.send_message(user_id, "–ê–¥–º–∏–Ω–∫–∞", reply_markup=admin_k)
        return
    info = text.split()
    if len(info) == 3:
        new_key(info[0], info[1], info[2])
        bot.send_message(user_id, "–ö–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=admin_k)
    else:
        bot.send_message(user_id, "–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", reply_markup=admin_k)
        bot.register_next_step_handler_by_chat_id(user_id, set_key)


def create_statistic():
    statistic = get_statistic_day()
    plt.clf()
    date = [i[0].strftime('%m/%d') for i in statistic]
    plt.title('–ó–∞ –¥–µ–Ω—å:', fontsize=20)
    bar = plt.bar(date, [i[1] for i in statistic])
    ax = plt.gca()
    for i, rect in enumerate(ax.patches):
        height = rect.get_height()
        label = statistic[i][1]
        ax.text(rect.get_x() + rect.get_width() / 2., height, '{}'.format(label), ha='center', va='bottom')
    for i in range(len(bar) - 1):
        bar[i].set_color('cornflowerblue')
    bar[-1].set_color("r")
    cwd = os.getcwd()
    plt.savefig(cwd + "/graph.png")

    statistic = get_statistic_all()
    plt.clf()
    date = [i[0].strftime('%m/%d') for i in statistic]
    plt.title('–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è:', fontsize=20)
    bar = plt.bar(date, [i[1] for i in statistic])
    ax = plt.gca()
    for i, rect in enumerate(ax.patches):
        height = rect.get_height()
        label = statistic[i][1]
        ax.text(rect.get_x() + rect.get_width() / 2., height, '{}'.format(label), ha='center', va='bottom')
    for i in range(len(bar) - 1):
        bar[i].set_color('cornflowerblue')
    bar[-1].set_color("r")
    cwd = os.getcwd()
    plt.savefig(cwd + "/graph1.png")

    return [cwd + "/graph.png", cwd + "/graph1.png"]


def mailing(message):
    chat_id = message.chat.id
    try:
        text = message.text
    except:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", reply_markup=admin_k)
        return
    if text == back_k.keyboard[0][0]["text"] or text == "/start":
        bot.send_message(chat_id, "–ê–¥–º–∏–Ω–∫–∞", reply_markup=admin_k)
        return
    all_users = get_all_users()
    bot.send_message(chat_id, "–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...", reply_markup=admin_k)
    for user_id in all_users:
        try:
            bot.send_message(user_id[0], text)
        except:
            pass
    bot.send_message(chat_id, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


while True:
    try:
        print("START GPTerra")
        bot.infinity_polling()
    except:
        sleep(3)
